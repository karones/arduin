

#include <Ethernet.h>
// the sensor communicates using SPI, so include the library:
#include <SPI.h>
#define API "1.0.1"
byte mac[] = {
  0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED
};
// assign an IP address for the controller:
IPAddress ip(192, 168, 1, 20);
 


EthernetServer server(80);

unsigned int messageCount = 1; //todo изменить тип или сделать обработку при переполнении.
bool Status = false;  //0 free 1 work
String inputString = "";
struct axisStruct  //todo шаблон
{
  int index;
  int maxValue;
  int minValue;
  String axisName;
};
typedef struct axisStruct axisStruct;
#define COUNT_AXIS 1
axisStruct axisData[COUNT_AXIS]; //пока вручную, заполняется в функции //

struct functionStruct  //todo шаблон
{
  int index;
  String functionString;
  String functionName;
};
typedef struct functionStruct functionStruct;
#define COUNT_FUNCTION 5
functionStruct functionData[COUNT_FUNCTION]; //пока вручную, заполняется в функции //

void setup() 
{

  inputString.reserve(200);
    // start the SPI library:
  SPI.begin();

  // start the Ethernet connection and the server:
  Ethernet.begin(mac, ip);
  server.begin();

 // give the sensor and Ethernet shield time to set up:
  delay(1000);
  CreateAxis();
  CreateFunctions();

}

void CreateAxis()
{
  axisData[0].index = 5;
  axisData[0].minValue = -50;
  axisData[0].maxValue = 50;
  axisData[0].axisName = "STRAIGHT";
  
}

void CreateFunctions()
{
  functionData[0].index = 1;
  functionData[0].functionName = "move";
  functionData[0].functionString = "@num@num";
}
void loop() 
{
   // listen for incoming Ethernet connections:
  listenForEthernetClients();
}

void moduleConnect(String mData)
{
  Serial.println("connect");
  if (mData.lastIndexOf(String (API)) != -1)
    mData = "answer:accepted:" + String(API);
  else
    mData = "answer:error";
  CreateMessage(mData);
}

void moduleCapalities()
{
  String function;
  for (int i=0; i<COUNT_FUNCTION; i++)
    {
      if (i == 0)
        function = "function@";
      else
        function = ",function@";
      function = function + String(functionData[i].index);
      function = function + "@";
      function = function + String(functionData[i].functionName);
      function = function + "@";
      function = function + String(functionData[i].functionString);
      function = function + "@";
        
    }
 
  for (int i=0; i<COUNT_AXIS; i++)
    {
      function = function + ",axis@";
      function = function + String(axisData[i].index);
      function = function + "@";
      function = function + String(axisData[i].axisName);
      function = function + "@";
      function = function + String(axisData[i].maxValue);
      function = function + "@";
      function = function + String(axisData[i].minValue);
      function = function + "@";
    }

  function = ":" + function;
  function = String (API) + function;
  function = ":" + function;
  function = "answer:accepted" + function;
  CreateMessage(function);
}

void CreateMessage(String message)
{

  message = message + "&&";
  message = ":" + message;
  message = String(messageCount) + message;

  unsigned int length = message.length() - 2; //&&

    message = ":" + message;
  message = String(length) + message;

  message = "RCML:" + message;

  messageCount ++;
//    server.write(message);
  return;
}
void moduleRequre(unsigned int mCount)
{
  if (!Status)
  {
    Status = true;
    CreateMessage("answer:accepted");
  }
  else
  {
    if(mCount == messageCount)
    CreateMessage("answer:error:required_by_this");
    else
     CreateMessage("answer:error:required_by_another");
   }
  return;
}

void freeRobot()
{
  Status = false;
  return;
}

void moduleFree(unsigned int mCount)
{
  if (Status)
  {
     if(mCount == messageCount)
     {
      freeRobot();
      CreateMessage("answer:accepted");
     }
     else
     CreateMessage("answer:error:required_by_another");
  }
  else
  {
     CreateMessage("answer:error:already_freed");
  }
}

void setAxis(int index, int value)
{


   return;
}
 void moduleAxis(String mMessage)
 {
  int index, value;
  String mData;
  mData = mMessage.substring((mMessage.indexOf(':', mMessage.indexOf(":") + 1 )), mMessage.lastIndexOf(":")); //, (mMessage.indexOf(':', mMessage.indexOf(":") + 2 )));
   mData.replace(":", " ");
    mData.trim();
  index = mData.toInt();

  mData = mMessage.substring((mMessage.lastIndexOf(":")), (mMessage.indexOf(':', mMessage.lastIndexOf(":") + 1 )));
    mData.replace(":", " ");
        mData.trim();
  value = mData.toInt();
   for (int i=0; i<COUNT_AXIS; i++)
    {
      if (axisData[i].index == index)
      {
        if ((axisData[i].minValue < value) and (value < axisData[i].maxValue))
        {
          setAxis(index, value);
          messageCount++;
          return; 
        }
        else
        {
         CreateMessage("answer:error:axis_value");
         return;
        }
      }
     
    }
    CreateMessage("answer:error:axis_index");
    return;
 }

void moves (int param1, int param2)
{
  
}
int function_1(String inputString)
{
  int param1, param2;
  Serial.println(inputString);
  
  String data = inputString.substring(0, inputString.indexOf(","));
   data.replace(":", " ");
    data.trim();
    Serial.println(data);
  param1 = data.toInt();
  data = inputString.substring(inputString.indexOf(","));
   data.replace(",", " ");
    data.trim();
        Serial.println(data);
  param2 = data.toInt();
  Serial.println(param1);
  Serial.println(param2);
  moves(param1, param2);
  return 0; 
}



void moduleExecute(String mData)
{

  mData = mData.substring(mData.indexOf(':', mData.indexOf(":") + 5 ));
  mData = mData.substring(mData.indexOf(':', mData.indexOf(":") + 1 ));

  String index = mData.substring(mData.indexOf(":"), (mData.indexOf(':', mData.indexOf(":") + 1 )));

    index.replace(":", " ");
    index.trim();
  int indexFunction= index.toInt();
Serial.println(mData);
  mData = mData.substring(mData.indexOf(':', mData.indexOf(":") + 1 ));

  Serial.println(mData);
  switch (indexFunction){
    case 1:
    {
    function_1(mData);
    break;
    }
    default: 
    CreateMessage("answer:error:function_index");
    }
  return;
}

void listenForEthernetClients() 
{
  // listen for incoming clients
  EthernetClient client = server.available();


    // an http request ends with a blank line

    while (client.connected()) {
      if (client.available()) {
        char inChar = client.read();
        inputString += inChar;
        // if you've gotten to the end of the line (received a newline
        // character) and the line is blank, the http request has ended,
        // so you can send a reply
     if ((inChar == '&') and (inputString.charAt(inputString.length()-2) == '&'))
    {
       String mData = inputString.substring(inputString.indexOf(":"), (inputString.indexOf(':', inputString.indexOf(":") + 1 )));
        mData.replace(":", " ");
     mData.trim();
      unsigned int length = mData.toInt();
      //RCML:6:2:axis:5:5&&
       if (length != 0) {
        mData = inputString.substring((inputString.indexOf(':', inputString.indexOf(":") + 1 )), (inputString.indexOf(':', inputString.indexOf(":") + 2 )));
 
        mData.replace(":", " ");
        mData.trim();
        unsigned int mCount = mData.toInt();
        
        if (mCount != messageCount)
        {
          //todo
        }
        mData = inputString.substring((inputString.indexOf(':', inputString.indexOf(":") + 3 )), inputString.indexOf("&&"));
       if (mData.lastIndexOf("connect") != -1)
          moduleConnect(mData);
        if (mData.lastIndexOf("require")!= -1)
          moduleRequre(mCount);
        if (mData.lastIndexOf("robot_capabilites")!= -1)
          moduleCapalities();
        if (mData.lastIndexOf("execute")!= -1)
          moduleExecute(mData);
             if (mData.lastIndexOf("axis")!= -1)
          moduleAxis(mData);
        if (mData.lastIndexOf("free")!= -1)
          moduleFree(mCount);

      }

 inputString ="";

    }
      }
    }
}

